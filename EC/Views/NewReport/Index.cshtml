@using EC.Models;
@using EC.Models.Database;
@using EC.App_LocalResources;
@using EC.Common.Interfaces;
@using EC.Localization;
@using EC.Core.Common;
@using EC.Model.Impl;
@using System.Linq;

@{
    bool? is_cc = ViewBag.is_cc;
    if (!is_cc.HasValue)
    {
        is_cc = false;
    }
    String class_ext = ViewBag.cc_extension;
    //is_cc = true;
    //String class_ext = "";
    //if (is_cc)
    //{
    //    class_ext = "_cc";
    //}
    IDateTimeHelper m_DateTimeHelper = new DateTimeHelper();
    Layout = "~/Views/Shared/IndexPages/LayoutCasesNewReport.cshtml";

    var user_id = (Int32)ViewBag.user_id;
    int report_id = (Int32)ViewBag.report_id;

    ReportModel rm = new ReportModel(report_id);
    List<report_non_mediator_involved> _involved = rm.GetWitnesses();
    UserModel um = new UserModel(user_id);
    var cm = new CompanyModel(rm._report.company_id);

    bool is_spam = ((rm._investigation_status != 1) && (rm._investigation_status != 2));
    GlobalFunctions glb = new GlobalFunctions();

    UserModel _last_user_promotion_model = new UserModel();
    if ((is_spam) && (rm.LastPromotion() != null))
    {
        _last_user_promotion_model = new UserModel(rm.LastPromotion().user_id);
    }

    string[] _statuses = EC.Constants.ECGlobalConstants.ReportFlowStatusesList;


    string report_name = " - #" + rm._report.display_name + " - " + rm.SecondaryTypeString() + " - " + rm.LocationString();
    ViewBag.Title = LocalizationGetter.GetString("NewReportUp") + report_name;
}
<body>
    <div class="headerPos">
        @if (report_id != 0)
        {
            for (int i = 0; i < 5; i++)
            {
                if (i < rm._investigation_status)
                {
                    <div class="positionN active@{@class_ext}">
                        <span>@_statuses[i]</span>
                    </div>
                    <div class="polos"></div>
                }
                else
                {
                    <div class="positionN">
                        <span>@_statuses[i]</span>
                    </div>
                    <div class="polos"></div>
                }
            }
        }
        else
        {
            <div style="color: #38494d;">@GlobalRes.no_permission</div>
            <div style="color: #38494d;">@GlobalRes.use_top_panel</div>
        }
    </div><!--headerPos-->
    @if (rm._report != null)
    {
        <div id="viewReport">
            <div class="contentViewReport">
                <div class=" firstposition">
                    <div class="positionReportIcon">
                        <div id="reportIcon"></div>
                    </div>
                    <div class="position">
                        <div class="positionTitle">
                            @if (!is_spam)
                            {
                                if (rm.GetThisStepDaysLeft() == 1)
                                {
                                    <div class="title">
                                        @GlobalRes.report_review_1day
                                    </div>
                                }
                                else
                                {
                                    <div class="title">
                                        @GlobalRes.report_review @rm.GetThisStepDaysLeft().ToString() @GlobalRes.daysleft
                                    </div>
                                }
                            }
                            else
                            {
                                <div class="title">
                                    @GlobalRes.report_review.
                                </div>
                            }
                        </div>
                        <table id="timeReport">
                            <tr>
                                <td class="openSans">@GlobalRes.Reported:</td>
                                <td class="openSansSemibold">@m_DateTimeHelper.ConvertDateToLongMonthString(rm._report.reported_dt)</td>
                            </tr>
                            <tr>
                                @if (!is_spam)
                                {
                                    <td class="openSans">@GlobalRes.Timeelapsed:</td>
                                }
                                else
                                {
                                    <td class="openSans">@GlobalRes.Totaltime:</td>
                                }
                                @if (rm.GetTotalDays() == 1)
                                {
                                    <td class="openSansSemibold">1 @GlobalRes.day</td>
                                }
                                else
                                {
                                    <td class="openSansSemibold">@rm.GetTotalDays().ToString() @GlobalRes.days1</td>
                                }
                            </tr>
                        </table>
                    </div>
                </div><!--firstPosition-->
                @if ((is_spam) && (rm.LastPromotion() != null))
                {
                    <div class="blockInfoSpam">
                        <div class="blockPhoto">
                            <div class="photoPersonal">
                                @if (_last_user_promotion_model._user.photo_path.Trim().Length == 0)
                                {
                                    <img src='@Url.Content("~/Content/Icons/noPhoto.png")' />
                                }
                                else
                                {
                                    <img src='@Url.Content(_last_user_promotion_model._user.photo_path.Trim())' />
                                }
                            </div><!--blockPhoto-->
                        </div>
                        <div class="blockInfoTextSpam">
                            <p class="textSpamTitle">@GlobalRes.Casemarkedasspam.</p>
                            <p class="textSpamDate">@_last_user_promotion_model._user.first_nm @_last_user_promotion_model._user.last_nm,@m_DateTimeHelper.ConvertDateToLongMonthString(@rm.LastPromotedDate()):</p>
                            <p class="textSpam">@rm.LastPromotion().description</p>
                        </div>
                    </div>
                }
                @if (!is_spam)
                {
                    <!-- accept_case button -->
                    if (is_cc.Value)
                    {
                        <label class="acceptCaseBtn acceptCaseBtn_cc">@GlobalRes.Acceptcase.ToLower()</label>
                    }
                    else
                    {
                        <label class="acceptCaseBtn">@GlobalRes.Acceptcase.ToLower()</label>
                    }
                    <input id="accept_case" type="submit" name="accept_case" />
                    <!-- mark_spam button -->
                    <label class="markSpamBtn">@GlobalRes.Markspam.ToLower()</label>
                    <input id="mark_spam" type="submit" name="mark_spam" />
                }
                else
                {
                    <div class="buttonBlock">
                        @*    <label class="spamBtn">@GlobalRes.Spam.ToUpper()</label>
                            <input id="spam_case" type="submit" name="spam_case" />*@
                        <!-- mark_spam button -->
                        @if (is_cc.Value)
                        {
                            <label class="acceptCaseBtn acceptCaseBtn_cc">@GlobalRes.Reopen.ToUpper()</label>
                        }
                        else
                        {
                            <label class="acceptCaseBtn">@GlobalRes.Reopen.ToUpper()</label>
                        }
                        <input id="reopen_case" type="submit" name="reopen_case" />
                    </div>
                }
            </div>
            @using (Html.BeginForm())
            {
                @Html.AntiForgeryToken()

                @model message

                var allScopes = (List<scope>)ViewBag.AllScopes;
                var allSeverities = (List<severity>)ViewBag.AllSeverities;
                var allDepartments = (List<company_department>)ViewBag.AllDepartments;
                var allIncidets = (List<company_secondary_type>)ViewBag.AllIncidets;
                var allOwners = (List<UserItems>)ViewBag.AllOwners;
                var allPolicies = (List<company_case_routing_attachments>)ViewBag.AllPolicies;
                var allCompanyLocations = (List<company_location>)ViewBag.company_location;
                var allReportSecondaryTypes = (List<report_secondary_type>)ViewBag.report_secondary_type;
                var allCompanyCaseRoutings = (List<company_case_routing>)ViewBag.company_case_routing;
                var allMediators = (List<user>)ViewBag.AllMediators;
                var allReportMediatorAssigned = (List<report_mediator_assigned>)ViewBag.report_mediator_assigned;
                var allReportMediatorInvolved = (List<report_mediator_involved>)ViewBag.report_mediator_involved;

                <!-- ============================== START Accept case ==================================== -->

                <style>
                    .blockAcceptCase table {
                        width: 100%;
                    }

                    .blockAcceptCase select {
                        width: 220px;
                        height: 40px;
                        margin-left: 12px;
                    }
                </style>
                <div id="blockAcceptCase" class="contentViewReport blockAcceptCase" style="display: none;">
                    <table>
                        <tbody>
                            <tr>
                                <td class="floatLeft"><p class="header">@GlobalRes.Acceptcase</p></td>
                                <td class="headerblockButtons"><div class="closeIcon"></div></td>
                            </tr>
                            <tr>
                                <td class="aroundSelect">@GlobalRes.Scope:</td>
                                <td class="inSelect">
                                    @{
                                        var selectedScopeId = 0;
                                        var types = allIncidets.Select(x => x.id).ToList();
                                        var route = allCompanyCaseRoutings.FirstOrDefault(x => types.Contains(x.company_secondary_type_id));
                                        if (route != null)
                                        {
                                            var scope = allScopes.FirstOrDefault(x => x.id == route.scope_id);
                                            if (scope != null)
                                            {
                                                selectedScopeId = scope.id;
                                            }
                                        }
                                    }
                                    @Html.DropDownList("ScopeId", new SelectList(allScopes, "id", "scope_en", selectedScopeId), new { @class = "" })
                                </td>
                                <td class="aroundSelect">@GlobalRes.Severity:</td>
                                <td class="inSelect">
                                    @Html.DropDownList("SeverityId", new SelectList(allSeverities, "id", "severity_en"), new { @class = "" })
                                </td>
                            </tr>
                            <tr>
                                <td class="aroundSelect">Case Owner:</td>
                                <td class="inSelect" colspan="3">
                                    <select class="" id="OwnerId" name="OwnerId" style="width: 100%">
                                        <option value="0">-------Currently has access-------</option>
                                        @foreach (var item in rm.MediatorsAcceptCase().Where(x => !String.IsNullOrEmpty(x.Detail)))
                                        {
                                            <option class="" value="@item.User.id">@item.FullNameWithDetail</option>
                                        }
                                        <option value="0">-------Currently does not have access------ </option>
                                        @foreach (var item in rm.MediatorsAcceptCase().Where(x => String.IsNullOrEmpty(x.Detail)))
                                        {
                                            <option class="needquestion" value="@item.User.id">@item.FullNameWithDetail</option>
                                        }
                                    </select>
                            </tr>
                            <tr>
                                @if (1 == 1)
                                {
                                    <td class="aroundSelect">Policy:</td>
                                    <td class="linkPdf">
                                        @if (allPolicies.Count == 0)
                                        {
                                            <p>No policy documents uploaded</p>
                                        }
                                        else
                                        {
                                            foreach (var item in allPolicies)
                                            {
                                                <div>
                                                    <a href="@Url.Content(item.path_nm)" download>@item.file_nm</a>
                                                </div>
                                            }
                                        }
                                    </td>
                                }
                                else
                                {
                                    <td class="aroundSelect">&nbsp;</td>
                                    <td class="linkPdf">&nbsp;</td>
                                }
                            </tr>
                    </table>

                    @if (is_cc.HasValue && is_cc.Value)
                    {
                        <p class="someAlert">
                            Does this Case or Alleged Offender pose an ongoing threat to the safety or health of the students and employees on campus?
                        </p>
                        <div style="padding: 20px;" id="AnonymousDiv">
                            <label class="inputBlock" for="Anonymous">
                                <input id="Anonymous" type="radio" name="isLifeThreat" value="true">
                                <span class="radioButton"></span>
                                <span class="radioTitle">Yes</span>
                            </label>
                            <label class="inputBlock" for="no">
                                <input id="no" type="radio" name="isLifeThreat" value="false">
                                <span class="radioButton"></span>
                                <span class="radioTitle">No</span>
                            </label>
                            <p class="someAlert" id="PAnonymous">
                                @if ((String.IsNullOrEmpty(cm._company.cc_campus_alert_manager_email)) && (String.IsNullOrEmpty(cm._company.cc_daily_crime_log_manager_email)))
                                {
                                    <span>Warning. A contact has not been entered to receive Campus Alerts. Please add the contact details before accepting the case and adding the Campus Alert.</span>
                                }
                                else
                                {
                                    <span>A campus alert will be sent to the designated Campus Security Authority for Purposes of the Clery Act.</span>
                                }
                            </p>
                        </div>
                    }

                    <div class="newMessageBtn">
                        @if (is_cc.Value)
                        {
                            <span class="acceptNewCase acceptNewCase_cc">@GlobalRes.Acceptcase.ToLower()</span>
                        }
                        else
                        {
                            <span class="acceptNewCase">@GlobalRes.Acceptcase.ToLower()</span>
                        }
                        <input type="submit" value="new message" style="display: none;">
                    </div>
                    <div class="contentBlockCase">
                        <p class="titleCase"></p>
                    </div>
                    <form action="" method="post"></form>
                </div>


                <!-- ============================== END Accept case ==================================== -->
                <!-- ============================== START Mark case as spam ==================================== -->

                <div class="contentViewReport blockSpamCase" style="display: none;">
                    <div class="headerblockButtons">
                        <div class="closeIcon"></div>
                    </div>
                    <div class="contentBlockCase">
                        <p class="titleCase">@GlobalRes.Mark_case_spam</p>
                        <p class="textCace">@GlobalRes.Notification_will_sent_reporter</p>
                    </div>
                    <form action="" method="post">
                        <div class="addComment addComment2@{@class_ext}">
                            <div class="blockPersonal">
                                <div class="blockPhoto">
                                    @Html.Partial("~/Views/Shared/Helpers/_UserPreviewFace.cshtml", new ViewDataDictionary { { "user_id", user_id }, { "is_owner", true } })

                                </div>
                            </div>
                            <div class="arrow green"></div>
                            <div class="messageText spamMessage">
                                <textarea cols="20" id="body_text" class="green" name="body_tx" rows="2" autofocus></textarea>
                            </div>
                        </div>
                        <div class="newMessageBtn">
                            <span class="markAsSpam">@GlobalRes.Mark_case_spam</span>
                            <input type="submit" value="new message" style="display: none;">
                        </div>
                    </form>
                </div>

                <!-- ============================== END Mark case as spam ==================================== -->
            }
        </div><!-- end viewReport-->

        <div id="generalInfo">
            <div class="firstPosition">
                <div class="blockGeneralInformation">
                    <span class="title">@GlobalRes.GeneralInformation</span>
                    <table class="generalInformation">
                        <tr>
                            <td>Reporting from:</td>
                            <td>@rm.CountryString()</td>
                        </tr>
                        <tr>
                            <td>@GlobalRes.Reporterwouldliketostay:</td>
                            <td>@rm._anonymousLevel_mediatorVersionByCaller(user_id)</td>
                        </tr>
                        @if (rm.Get_reporter_name(user_id).ToLower() != GlobalRes.anonymous_reporter.ToLower())
                        {
                            <tr>
                                <td>@GlobalRes.Reportername</td>
                                <td>@rm.Get_reporter_name(user_id)</td>
                            </tr>
                        }
                        @if (rm._report.incident_anonymity_id == 3)
                        {
                            <tr>
                                <td>@GlobalRes.Email</td>
                                <td>@rm._reporter_user.email</td>
                            </tr>
                        }
                        @if (rm._report.incident_anonymity_id == 3 && rm._reporter_user.phone != null && rm._reporter_user.phone != String.Empty)
                        {
                            <tr>
                                <td>Telephone</td>
                                <td>@rm._reporter_user.phone</td>
                            </tr>
                        }
                        <tr>
                            <td>@GlobalRes.Reporteris:</td>
                            <td>@rm.ReporterCompanyRelationShort()</td>
                        </tr>
                        @if (!String.IsNullOrEmpty(rm._report.not_current_employee))
                        {
                            <tr>
                                <td></td>
                                <td>@rm._report.not_current_employee</td>
                            </tr>
                        }
                        <tr>
                            <td>@GlobalRes.TheIncidentHappenedIn:</td>
                            <td>@rm.LocationString()</td>
                        </tr>
                        <tr>
                            <td>@GlobalRes.AffectedDepartment:</td>
                            <td>@rm.DepartmentsString()</td>
                        </tr>
                    </table>
                </div>
                <div class="blockPartiesInformation">
                    <span class="title">@GlobalRes.PartiesInvolved</span>
                    <table class="generalInformation">
                        <tr>
                            <td>
                                @GlobalRes.report_by_myself
                            </td>
                            <td>
                                @(rm._report.report_by_myself ? @GlobalRes.Myself : @GlobalRes.SomeoneElse)
                            </td>
                        </tr>
                    </table>
                    @if (_involved.Count > 0)
                    {
                        <table class="generalInformation">
                            @foreach (var item in _involved)
                            {
                                <tr>
                                    <td>@item.Role</td>
                                    <td>@item.Name @item.last_name, @item.Title</td>
                                </tr>
                            }
                        </table>
                    }
                    @if (rm.InvolvedMediatorsUserList().Count > 0)
                    {
                        <table class="generalInformation">
                            <tr>
                                <td>@LocalizationGetter.GetString("Mediatorsinvolved", is_cc)</td>
                                <td>&nbsp;</td>
                            </tr>
                            @foreach (user mediators_involved in rm.InvolvedMediatorsUserList())
                            {
                                <tr>
                                    <td>@mediators_involved.first_nm @mediators_involved.last_nm</td>
                                    <td>@mediators_involved.title_ds</td>
                                </tr>
                            }
                        </table>
                    }
                    <table class="generalInformation">
                        <tr>
                            <td>@GlobalRes.Doesmanagementknowaboutthisincident</td>
                            <td>@rm.ManagementKnowString()</td>
                        </tr>
                        @if (!String.IsNullOrEmpty(rm._report.management_know_text))
                        {
                            <tr>
                                <td></td>
                                <td>@rm._report.management_know_text</td>
                            </tr>
                        }
                    </table>
                    <table class="generalInformation">
                        <tr>
                            <td>Incident reported externally?</td>
                            <td>@rm.IsReportedOutside()</td>
                        </tr>
                        @if (!String.IsNullOrEmpty(rm._report.reported_outside_text))
                        {
                            <tr>
                                <td></td>
                                <td>@rm._report.reported_outside_text</td>
                            </tr>
                        }
                        <tr>
                            <td>Is report urgent?</td>
                            <td>@rm.IsReportedUrgent()</td>
                        </tr>
                    </table>
                </div>
                <div class="blockCaseInformation">
                    <span class="title">@GlobalRes.CaseInformation</span>
                    <table class="caseInformation">
                        <tr>
                            <td>Incident Type:</td>
                            <td>@rm.SecondaryTypeString()</td>
                        </tr>
                        <tr>
                            <td>@GlobalRes.IncidentDate:</td>
                            <td>@rm.IncidentDateStringMonthLong()</td>
                        </tr>
                        <tr>
                            <td>@GlobalRes.isOngoing?</td>
                            <td>@rm.IsOngoing()</td>
                        </tr>
                        @if (!String.IsNullOrEmpty(rm._report.report_frequency_text))
                        {
                            <tr>
                                <td></td>
                                <td>@rm._report.report_frequency_text</td>
                            </tr>
                        }
                        <tr>
                            <td>@GlobalRes.incidentResult?</td>
                            <td>@rm.HasInjuryDamage()</td>
                        </tr>
                        @if (!String.IsNullOrEmpty(rm._report.injury_damage))
                        {
                            <tr>
                                <td></td>
                                <td>@rm._report.injury_damage</td>
                            </tr>
                        }
                    </table>
                </div>
                <div class="incidentDescription">
                    <p class="titleIncidentDescription">@GlobalRes.IncidentDescription:</p>
                    <div class="text">
                        @rm._report.description
                    </div>
                </div>
            </div>
            <div class="contentDownloadDoc">
                @foreach (EC.Models.Database.attachment file in ViewBag.attachmentFiles)
                {
                    <div class="blockDownloadDoc">
                        <div class="blockImg">
                            <img src='@Url.Content("/Content/Icons/attachment-icon_preview.png")'>
                        </div>
                        <div class="infoBlock">
                            <p>@file.file_nm</p>
                            <a href="@file.path_nm" download>@GlobalRes.Download.ToLower()</a>
                        </div>
                    </div>
                }
            </div>
        </div><!-- end generalInfo-->

        <div class="helpBlock">
            <span></span>
        </div>
    }
</body>
<!--Unknown-->
<p>@ViewBag.id</p>
<!-- Messages-->
<div>
    <p>@ViewBag.companyName</p>
</div>
<div>
    <p>@ViewBag.generatedName</p>
</div>

<script src="~/Scripts/lib/jquery-1.10.2.min.js"></script>
<script>
    $(document).ready(function () {
        $('#PAnonymous').hide();
        $('#AnonymousDiv').click(function(){
            $('#PAnonymous').hide();
            if ($('#Anonymous:checked').length == 1) {
                $('#PAnonymous').show();
            }
        });

        //$        //name="spamMessage
        function showBlockDocs(){
            if($('.contentDownloadDoc').html().trim()=="")
                $('.contentDownloadDoc').hide();
        }

        function sendMessageSpam(){
            $('.markAsSpam').click(function(){
                var self = $(this);
                var spamMessage = $('.spamMessage textarea').val();
                markAsSpam(@Html.Raw(report_id), @Html.Raw(user_id), spamMessage);
                var str = '@Url.Content("~/Cases/Index?mode=spam")';
                window.location.href = str;
            });
        }

        function markAsSpam(report_id, user_id, message) {
            $.ajax({
                method: "POST",
                url: "/NewReport/SendSpamMessage",
                data: { report_id : report_id, user_id: user_id, spamMessage: message }
            }).done(function(data) {//data from server
            }).fail(function(error){
                console.log(error);
            });
        }

        $('.acceptNewCase').click(function(){
            var self = $(this);
            var description = $('.acceptCaseNote textarea').val();
            $('#SeverityId').removeClass('has-error');
            if ($('#SeverityId').val() === '1') {
                $('#SeverityId').addClass('has-error');
                return;
            }
            $('#OwnerId').removeClass('has-error');
            if ($('#OwnerId').val() === "0") {
                $('#OwnerId').addClass('has-error');
                return;
            }

            if ($('#OwnerId').find(":selected").hasClass('needquestion')) {
                if (confirm('Alert: you have chosen a Case Owner that has not been routed to this type of case, either by location, incident type or level. Do you want to proceed?')) {
                    reopenOrAcceptCase(@Html.Raw(report_id), @Html.Raw(user_id), description);
                }
                return;
            }
            reopenOrAcceptCase(@Html.Raw(report_id), @Html.Raw(user_id), description);
        });

        function reopenOrAcceptCase(report_id, user_id, description) {
            $.ajax({
                method: "POST",
                url: "/NewReport/AcceptOrReopenCase",
                data: {
                    report_id : report_id,
                    user_id: user_id,
                    description : '',
                    //incidentId : $('#IncidentId').val(),
                    //departmentId: $('#DepartmentId').val(),
                    scopeId : $('#ScopeId').val(),
                    severityId: $('#SeverityId').val(),
                    ownerId: $('#OwnerId').val(),
                    isLifeThreat: $('[name="isLifeThreat"]:checked').val()
                }
            }).done(function(data) {
                var str = window.location.href;
                window.location.href = str;
            }).fail(function(error){
                console.log(error);
            });
        }


        function showBlockSpamCase(){
            $('#viewReport .contentViewReport:first-child .markSpamBtn').click(function () {
                //$('#viewReport .contentViewReport #mark_spam').click();

                $('#viewReport .contentViewReport:first-child').css('display', 'none');
                $('.contentViewReport.blockSpamCase').css('display', 'block');
            });
        }
        function hideAcceptOrSpamCase(){
            $('.contentViewReport .headerblockButtons .closeIcon').click(function () {
                $('.contentViewReport').css('display', 'none');
                $('#viewReport .contentViewReport:first-child').css('display', 'block');
            });
        }
        function showBlockAcceptCase(){
            $('#viewReport .contentViewReport:first-child .acceptCaseBtn').click(function () {
                $('#viewReport .contentViewReport:first-child').css('display', 'none');
                $('.contentViewReport.blockAcceptCase').css('display', 'block');

                //$('#viewReport .contentViewReport #accept_case').click();
            });
        }

        function styleTextArea(){
            $('textarea')
                .focus(function () {
                    var self = $(this);
                    self.addClass('green').removeClass('grey');
                    self.attr("placeholder", "");
                    self.parents('.addComment').find('.arrow').addClass('green').removeClass('grey');
                })
                .focusout(function () {
                    //$(this).css('border', '2px solid #b2bfc3');
                    //$(this).attr("placeholder", "");
                    //$(this).parent().parent().find('.blockPersonal').find('.arrow').css('border-right', '5px solid #b2bfc3');

                    var self = $(this);
                    self.removeClass('green').addClass('grey');
                    self.attr("placeholder", "");
                    self.parents('.addComment').find('.arrow').removeClass('green').addClass('grey');
                });

        }


        function clickBtnSpamOrReopen(){
            $('#viewReport .contentViewReport .buttonBlock .acceptCaseBtn').click(function () {
                $('#viewReport .contentViewReport #reopen_case').click();
            });
            $('#viewReport .contentViewReport .buttonBlock .spamBtn').click(function () {
                $('#viewReport .contentViewReport #spam_case').click();
            });
        }

        function acceptCaseBtnClick(){
            $('#viewReport .blockSpamCase .acceptCaseBtn, #viewReport .blockAcceptCase .acceptCaseBtn').click(function () {
                $('input#acceptCase').click();
            });
        }
        function spamCaseBtnClick(){
            $('#viewReport .blockSpamCase .markSpamBtn, #viewReport .blockAcceptCase .markSpamBtn').click(function () {
                $('input#markSpam').click();
            });
        }

        function setDropdown() {
            $('.dropdown').unbind('click');
            $('.dropdown ul li').unbind('click');

            $('.dropdown').on('click',function () {
                $(this).children('ul').slideToggle(150);
                if ($(this).hasClass('open')) {
                    $(this).removeClass('open');
                    return false;
                } else {
                    $(this).addClass('open');
                    return false;
                }

                return false;
            })

            .hover(
            function () {

            },
            function () {
                $(this).children('ul').slideUp(150);
                $(this).removeClass('open');
            });

            $('.dropdown ul li').click(function () {
                var sitem = $(this).html();
                var sid = $(this).attr('value');
                if ($(this).attr('data-id') == "Not Listed") {
                    $(this).siblings('li').removeClass('selected');
                    $(this).addClass('selected');
                    $(this).parent('ul').siblings('span.selected').html(sitem);
                    $(this).parent('ul').siblings('input').val(sid);
                    $(this).parent('ul').parent('.subject').change();
                    $(this).parent('ul').parent('.subject').find('.validate').addClass('vlCorrect');
                    return;
                }
                $(this).siblings('li').removeClass('selected');
                $(this).addClass('selected');
                $(this).parent('ul').siblings('span.selected').html(sitem);
                $(this).parent('ul').siblings('input').val(sid);
                $(this).parent('ul').parent('.subject').change();
                $(this).parent('ul').parent('.subject').find('.validate').change();
            });
        }

        showBlockDocs();
        sendMessageSpam();
        styleTextArea();
        showBlockAcceptCase();
        showBlockSpamCase();
        hideAcceptOrSpamCase();

        acceptCaseBtnClick();
        spamCaseBtnClick();
        clickBtnSpamOrReopen();
        setDropdown();
    });

</script>