@using EC.Models;
@using EC.Models.Database;
@using EC.Constants;
@using EC.Localization;
@using EC.Constants;
@using EC.Models;
@using EC.Models.ViewModels;
@{
  bool? is_cc = ViewBag.is_cc;
  if (!is_cc.HasValue)
  {
    is_cc = false;
  }
  String class_ext = ViewBag.cc_extension;

  //bool is_cc = true;
  //String class_ext = "";
  //if (is_cc)
  //{
  //    class_ext = "_cc";
  //}


  //var um2 = (UserModel)ViewBag.um;
  var user_id = ViewBag.user_id;

  string hrefURL_1 = Request.Url.AbsoluteUri.ToLower();

  UserModel um = new UserModel(user_id);
  CompanyModel cm = new CompanyModel(um._user.company_id);
  ReportModel rm = new ReportModel();
  ReadStatusModel rsm = new ReadStatusModel();
  UsersUnreadEntitiesNumberViewModel userUnreadEntities = rsm.GetUserUnreadEntitiesNumbers(user_id);

  var unread_report_number = userUnreadEntities.unread_reports;

  var unread_report_number_string = "";
  string page_subtitle = "";
  if (unread_report_number > 0)
  {
    unread_report_number_string = unread_report_number.ToString();
  }

  int unread_message_number = userUnreadEntities.unread_messages;
  // int unread_message_number = um.Unread_Messages_Quantity(0, 1) + um.Unread_Messages_Quantity(0, 2) + um.Unread_Messages_Quantity(0, 3);
  var unread_message_number_string = "";
  if (unread_message_number > 0)
  {
    unread_message_number_string = unread_message_number.ToString();
  }

  int unread_task_number = userUnreadEntities.unread_tasks;
  //int unread_task_number = um.UnreadTasksQuantity(0, true, 1);
  var unread_task_number_string = "";
  if (unread_task_number > 0)
  {
    unread_task_number_string = unread_task_number.ToString();
  }

  user _user = um._user;
  company _company = cm.GetById(_user.company_id);
  string report_name = "Case";

  int _report_id = 0;
  int investigationstatus = 1;
  string report_color = "", report_color_code = "", report_name_code = "";
  if ((ViewBag.report_id != null) && ((int)ViewBag.report_id != 0))
  {
    _report_id = (int)ViewBag.report_id;
    rm = new EC.Models.ReportModel(_report_id);

    report_name = rm._reportStringModel.SecondaryTypeString() + " - " + rm._reportStringModel.LocationString() + " - #" + rm._report.display_name;
    report_name_code = LocalizationGetter.GetString("Newreport", is_cc) + ": #" + rm._report.display_name;
    report_color = rm._reportStringModel.ColorDescr();
    report_color_code = rm._reportStringModel.ColorCode();
    investigationstatus = rm._investigation_status;
  }

  string[] _statuses = ECGlobalConstants.ReportFlowStatusesList;

  string same_mediator_warning = LocalizationGetter.GetString("AddFurtherNotes", is_cc);
  if (rm != null && user_id == rm.Last_investigation_status_user_id())
  {
    same_mediator_warning = LocalizationGetter.GetString("RecommendSecond1", is_cc) + " " + LocalizationGetter.GetString("RecommendSecond2", is_cc);
  }
  bool is_sso = false;
  if (Session[ECSessionConstants.SessionIsSSO] != null && Session[ECSessionConstants.SessionIsSSO].ToString() == "1")
  { is_sso = true; }

  bool is_sso_domain = false;
  if (ViewBag.is_sso_domain != null && ViewBag.is_sso_domain == true)
  {
    is_sso_domain = true;
  }


}
<!DOCTYPE html>
<html>
<head lang="en">
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width">
    @*<link href="~/Content/fonts.css" rel="stylesheet" type="text/css">*@
    <link rel="stylesheet" type="text/css" href="~/Content/main.css">
    <link rel="stylesheet" type="text/css" href="~/Content/styleReportDashboard.css">
    <link rel="stylesheet" type="text/css" href="~/Content/styleTasks.css">
    <link rel="stylesheet" type="text/css" href="~/Content/stylePageMessages.css">
    <link rel="stylesheet" href="~/Libs/fullcalendar/dist/fullcalendar.css" />
    <link rel="stylesheet" href="~/Content/newCase.css" />
    <link rel="shortcut icon" type="image/x-icon" src="~/favicon.ico" />
    <link href="~/Content/jquery-ui.css" rel="stylesheet">
    <title>@ViewBag.Title</title>
    <!--<link href="styleReportDashboard.min.css" rel="stylesheet">-->
    <script type="text/javascript" src="~/Scripts/lib/jquery-1.10.2.min.js"></script>
    <script type="text/javascript" src="~/Scripts/lib/jquery-ui.min.js"></script>
    <script src="~/Scripts/View/reportSummary.js"></script>
    <script src="~/Libs/angular/angular.js"></script>
    <script src="~/Libs/angular-http/angular-http.js"></script>
    <script src="~/Libs/angular-resource/angular-resource.min.js"></script>
    <script src="~/Libs/angular-animate/angular-animate.min.js"></script>
    <script src="~/Libs/angular-sanitize/angular-sanitize.min.js"></script>
    <script src="~/Libs/ng-file-upload/ng-file-upload.min.js"></script>
    <script type="text/javascript" src="~/Libs/angular-ui-calendar/src/calendar.js"></script>

    <script src="~/Libs/d3/d3.min.js"></script>
    <script src="~/Libs/nvd3/build/nv.d3.min.js"></script>
    <script src="~/Libs/angular-nvd3/dist/angular-nvd3.min.js"></script>
    <script type="text/javascript" src="~/Libs/moment/min/moment.min.js"></script>
    <script type="text/javascript" src="~/Libs/fullcalendar/dist/fullcalendar.min.js"></script>
    <script type="text/javascript" src="~/Libs/fullcalendar/dist/gcal.js"></script>
    <script src="~/Scripts/dis.min.js?version=@System.Configuration.ConfigurationManager.AppSettings["versionDisJS"]"></script>
</head>
<body ng-app="EC">
    <input type="hidden" id="_report_id" value="@Html.Raw(_report_id)" />
    <input type="hidden" id="user_id" value="@Html.Raw(user_id)" />
    <input type="hidden" id="" value="" />

    <header class="header">
        @{
            string mainURL = Request.Url.AbsoluteUri.ToLower();
            string _menuAnalytics = "", _menuTasks = "", _menuMessages = "", _menuCases = "";
            if ((mainURL.Contains("tasks")) || (mainURL.Contains("task/")))
            {
                if ((!mainURL.Contains("analytics")) && (!mainURL.Contains("/case/")))
                {
                    _menuTasks = "active";
                }
            }

            if ((mainURL.Contains("cases")) || (mainURL.Contains("newreport/")) || (mainURL.Contains("case/")))
            {
                _menuCases = "active";
            }

            if (mainURL.Contains("analytics"))
            {
                _menuAnalytics = "active";
            }
            if (mainURL.Contains("messages") && !mainURL.Contains("NewCase/messages/"))
            {
                _menuMessages = "active";
            }
        }
        <div class="container clearfix">
            <div class="header__leftBlock">
                @if (is_sso_domain == true)
                {
                <div class="headerTop-logo">
                    <a href="#" class="headerTop-logo__link" style="padding: 1px 0px;text-align: center;">
                        <div class="headerTop-Text__text" style="padding: 15px 0px;margin-left: -17px;">
                            @LocalizationGetter.GetString("CaseManagament")
                        </div>
                    </a>
                </div>
                } else
                {
                <div class="headerTop-logo">
                    <a href="#" class="headerTop-logo__link">
                        <div class="headerTop-logo__img"></div>
                    </a>
                </div>
                }



                <ul class="mainNavigation">
                    @if (_user.role_id != ECLevelConstants.level_trainer)
                    {
                        <li class="navConteiner @_menuAnalytics">
                            <a href="/analytics/Index" class="navConteiner__a ">
                                <span class="navConteiner__icon navConteiner__icon_analytics"></span>
                                <span class="navConteiner__name">Analytics</span>

                            </a>
                        </li><!-- /.navConteiner -->
                        <li class="navConteiner @_menuTasks">
                            <a href="/tasks/Index" class="navConteiner__a navConteiner__badgeCount_enable">
                                <span class="navConteiner__icon navConteiner__icon_tasks"></span>
                                <span class="navConteiner__name">Tasks</span>
                                @if (unread_task_number_string.Length > 0)
                                {<span class="navConteiner__badgeCount ">@unread_task_number_string</span>}
                            </a>
                        </li><!-- /.navConteiner -->
                        <li class="navConteiner @_menuMessages">
                            <a href="/messages/Index" class="navConteiner__a navConteiner__badgeCount_enable">
                                <span class="navConteiner__icon navConteiner__icon_messages"></span>
                                <span class="navConteiner__name">Messages</span>
                                @if (unread_message_number_string.Length > 0)
                                {<span class="navConteiner__badgeCount ">@unread_message_number_string</span>}
                            </a>
                        </li><!-- /.navConteiner -->
                        <li class="navConteiner @_menuCases">
                            <a href="/cases/Index" class="navConteiner__a navConteiner__badgeCount_enable">
                                <span class="navConteiner__icon navConteiner__icon_dashboard"></span>
                                <span class="navConteiner__name">Dashboard</span>
                                @if (unread_report_number_string.Length > 0)
                                {<span class="navConteiner__badgeCount ">@unread_report_number_string</span>}
                            </a>
                        </li>
                    }
                </ul>
            </div>
            <div class="header__rightBlock">
                <div class="userNavigation">
                    <a href="#" class="userNavigation__a">

                        @if (_user.role_id != ECLevelConstants.level_trainer)
                        {
                            <div class="userNavigation__info">
                                @*
                                    <div class="userNavigation__name">@(um._user != null ? um._user.first_nm : "")</div>
                                    <div class="userNavigation__surname">@(um._user != null ? um._user.last_nm : "")</div>
                                *@
                                @if (_user != null)
                                {
                                    var logo = cm.getLogoCompany(_user.company_id);
                                    if (!String.IsNullOrEmpty(logo))
                                    {
                                        <img src="@Url.Content(cm.getLogoCompany(_user.company_id))" style="max-height: 44px;" alt="CompanyLogo" />
                                    }
                                }
                            </div>
                        }
                        <div class="userNavigation__logo">
                            @if ((um._user != null) && (um._user.photo_path.Trim() != ""))
                            {
                                <img src="@Url.Content(um._user.photo_path.Trim())" alt="UserLogo" />
                            }
                            else
                            {
                                <img src="@Url.Content("/Content/Icons/anonimousReporterIcon.png")" alt="UserLogo" />
                            }
                        </div>
                        <div class="userNavigation__triangle"></div>
                    </a>
                    <ul class="dropDown-navigation">
                        @if (_user.role_id != ECLevelConstants.level_trainer)
                        {
                            <li class="dropDown-navigation__li"><a href="/settings/index/" class="dropDown-navigation__a">@LocalizationGetter.GetString("Settings")</a></li>
                            <li class="dropDown-navigation__li active">
                                <a href="/EmployeeAwareness/" class="dropDown-navigation__a">
                                    Posters
                                </a>
                            </li>
                            if (is_sso_domain == false)
                            {
                            <li class="dropDown-navigation__li active">
                                <a href="/Trainer/Calendar" class="dropDown-navigation__a">
                                    Book Training
                                </a>
                            </li>
                            if ((cm.AllPayments().Count > 0) && (is_sso_domain == false))
                            {
                                <li class="dropDown-navigation__li active">
                                    <a href="/Payment/History" class="dropDown-navigation__a">
                                        Subscription
                                    </a>
                                </li>
                              }
                            }

                          }
                        @if (is_sso_domain == false)
                        {
                            <li class="dropDown-navigation__li active">
                                <a href="/settings/password/" class="dropDown-navigation__a">
                                    @LocalizationGetter.GetString("Password")
                                </a>
                            </li>
                        }
                        @if (is_sso_domain == false)
                        {
                            <li class="dropDown-navigation__li">
                                <form id="logout_form" action="@Url.Action("Logout", "Base")">
                                    <a href="" onclick="document.getElementById('logout_form').submit();" class="dropDown-navigation__a">
                                        @LocalizationGetter.GetString("Logout2")
                                    </a>
                                </form>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </div>
    </header>

    <div class="menuCasesBlock" style="margin-top: 35px; margin-bottom: 35px;">
        <div class="headerBlockTextLeft">
            @{
                string hrefURL = Request.Url.AbsoluteUri.ToLower();
                if (hrefURL.Contains("/settings"))
                {
                    hrefURL = "/settings/index";
                    page_subtitle = LocalizationGetter.GetString("Settings", is_cc);
                }
                if ((hrefURL.Contains("/tasks")))
                {
                    if (!mainURL.Contains("analytics"))
                    {
                        hrefURL = "/tasks/index";
                        page_subtitle = LocalizationGetter.GetString("Tasks", is_cc);
                    }
                }
                if ((hrefURL.Contains("NewCase/")) || (hrefURL.Contains("/cases")) || (hrefURL.Contains("/newreport") || (hrefURL.Contains("NewCase/task/"))))
                {
                    hrefURL = "/cases/index";
                    page_subtitle = LocalizationGetter.GetString("Cases", is_cc);
                }

                if (hrefURL.Contains("/cases"))
                {
                    hrefURL = "/cases/index";
                    page_subtitle = LocalizationGetter.GetString("Dashboard", is_cc);
                }

                if (hrefURL.Contains("/analytics"))
                {
                    hrefURL = "/analytics/index";
                    page_subtitle = LocalizationGetter.GetString("Analytics", is_cc);
                }

                if (hrefURL.Contains("/messages"))
                {
                    hrefURL = "/messages/index";
                    page_subtitle = LocalizationGetter.GetString("Messages", is_cc);
                }

                if (hrefURL.Contains("/payment"))
                {
                    hrefURL = "/Payment/History";
                    page_subtitle = LocalizationGetter.GetString("Payments", is_cc);
                }
                if (hrefURL.Contains("/employeeawareness"))
                {
                    hrefURL = "/EmployeeAwareness";
                    page_subtitle = "Employee Awareness";
                }
            }
            @*<a href="/cases/Index/@{if (String.IsNullOrEmpty(ViewBag.redirect)) { @ViewBag.redirect; }}">*@
            <a href=@hrefURL>
                <span class="labelCases">@page_subtitle</span>
            </a>
            <span class="labelArrow">></span>
            @if (_report_id != 0)
            {
                string overlay_title = LocalizationGetter.GetString("RequestCloseCase", is_cc);
                string textbox_title = LocalizationGetter.GetString("Caseresolution", is_cc);
                string normal_button_promotion = LocalizationGetter.GetString("RequestCloseCase", is_cc); //ResolveCaseUp
                string left_button_promotion = "";

                //string normal_button_value = ECGlobalConstants.investigation_status_completed;
                string normal_button_value = ((int)CaseStatusConstants.CaseStatusValues.Completed).ToString();
                string left_button_value = "";// Constant.investigation_status_completed.ToString();


                rm = new ReportModel(_report_id);
                List<company_outcome> company_outcomes = cm.Outcomes(_user.company_id, 2);

                List<user> mediators = rm.MediatorsWhoHasAccessToReport();

                //<span class="casesDot @report_color"> <span></span></span>
                <span class="casesDot"> <span style="background: #@report_color_code"></span></span>
                @Html.Raw("</div>");
                <div class="headerBlockTextRight">
                    @{
                        hrefURL = Request.Url.AbsoluteUri.ToLower();
                        if (hrefURL.Contains("newreport"))
                        {
                            <span class="text">@report_name_code</span>
                        }
                        else
                        {
                            <span class="text">@report_name</span>
                        }
                    }
                </div>
                if ((investigationstatus > 2 && investigationstatus < 7) || (investigationstatus == 9))
                {
                    string Res_or_comp = LocalizationGetter.GetString("CloseCaseUp", is_cc).ToUpper();

                    if ((investigationstatus == 4) || (investigationstatus == 6))
                    {
                        Res_or_comp = "";
                        normal_button_value = "";
                        left_button_value = "";
                    }


                    if ((investigationstatus == 9) && (_user.role_id == 4 || _user.role_id == 5))
                    {
                        Res_or_comp = LocalizationGetter.GetString("Reopen", is_cc).ToUpper();
                        overlay_title = LocalizationGetter.GetString("ReopenCase", is_cc);
                        textbox_title = LocalizationGetter.GetString("Description", is_cc);
                        normal_button_promotion = LocalizationGetter.GetString("ReopenCaseUp", is_cc);
                        normal_button_value = ((int)CaseStatusConstants.CaseStatusValues.Investigation).ToString();

                    }
                    @Html.Partial("~/Views/Shared/EditorTemplates/CreateTaskModal.cshtml", new ViewDataDictionary {
                { "normal_button_promotion", normal_button_promotion },
                { "Res_or_comp", Res_or_comp },
                { "overlay_title", overlay_title },
                { "textbox_title", textbox_title },
                {"investigationstatus", investigationstatus },
                {"left_button_promotion", left_button_promotion },
                {"normal_button_value", normal_button_value },
                {"left_button_value", left_button_value },
                {"company_outcomes", company_outcomes },
                { "report_id", ViewBag.report_id },
                { "is_cc", is_cc }
            })

                    @Html.Partial("~/Views/Shared/EditorTemplates/ApproveDialogModal.cshtml", new ViewDataDictionary
               {
               })

                    if (((rm._investigation_status == (int)CaseStatusConstants.CaseStatusValues.Completed || rm._investigation_status == (int)CaseStatusConstants.CaseStatusValues.Resolution)))
                    {
                        <div id="resoveCompletedTopmessage">
                            <div class="buttonNoneBorderGray">
                                <div class="textInButton">
                                    @LocalizationGetter.GetString("Awaitingapproval", is_cc)
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {

                        if (Res_or_comp.Trim().Length > 0)
                        {
                            <span id="resoveCompletedTopBtn" class="acceptCaseBtn resolveCase">@Res_or_comp</span>
                        }
                    }
                    if (mediators.Count > 0)
                    {
                        <div class="displayMediators">
                            @foreach (user _mediator in mediators)
                            {

                                if (_mediator != null && _mediator.id != 0)
                                {
                                    @Html.Partial("~/Views/Shared/Helpers/_UserPreviewFace.cshtml", new ViewDataDictionary { { "user_id", _mediator.id }, { "is_owner", true } })
                                }
                                else
                                {
                                    <div class="status"></div>
                                    <div class="anonimousReporterIcon"></div>
                                }

                            }
                        </div><!--displayMediators-->
                    }
                }
            }
            else
            {
                string CurrentURL = Request.Url.AbsoluteUri.ToLower();
                string _temp = "";
                bool flag = false;
                if (CurrentURL.Contains("/cases"))
                {
                    _temp = LocalizationGetter.GetString("ActiveCasesUp", is_cc);
                    flag = true;
                }
                if (CurrentURL.Contains("/cases/index"))
                {
                    _temp = LocalizationGetter.GetString("ActiveCasesUp", is_cc);
                    flag = true;
                }
                if (CurrentURL.Contains("/cases/completed"))
                {
                    _temp = LocalizationGetter.GetString("CompletedcasesUp", is_cc);
                    flag = true;
                }
                if (CurrentURL.Contains("/cases/closed"))
                {
                    _temp = LocalizationGetter.GetString("ClosedCasesUp", is_cc);
                    flag = true;
                }
                if (CurrentURL.Contains("/cases/spam"))
                {
                    _temp = LocalizationGetter.GetString("SpamcasesUp", is_cc);
                    flag = true;
                }

                if (CurrentURL.Contains("settings/"))
                {
                    _temp = LocalizationGetter.GetString("MyProfile", is_cc);
                    flag = true;
                }
                if (CurrentURL.Contains("settings/company"))
                {
                    _temp = LocalizationGetter.GetString("CompanyProfile", is_cc);
                    flag = true;
                }
                if (CurrentURL.Contains("settings/mediators"))
                {
                    _temp = LocalizationGetter.GetString("CompanyMediators", is_cc);
                    flag = true;
                }
                if (CurrentURL.Contains("settings/password"))
                {
                    _temp = LocalizationGetter.GetString("Password", is_cc);
                    flag = true;
                }
                if (CurrentURL.Contains("settings/cases"))
                {
                    _temp = LocalizationGetter.GetString("CaseSettings", is_cc);
                    flag = true;
                }
                if (CurrentURL.Contains("settings/user"))
                {
                    _temp = LocalizationGetter.GetString("Profile", is_cc);
                    flag = true;
                }

                if (CurrentURL.Contains("tasks/"))
                {
                    _temp = LocalizationGetter.GetString("Mytasks", is_cc);
                    flag = true;
                }
                if (CurrentURL.Contains("tasks/completed"))
                {
                    _temp = LocalizationGetter.GetString("Closedtasks", is_cc);
                    flag = true;

                }
                if (CurrentURL.Contains("analytics/index") || CurrentURL.Contains("/analytics"))
                {
                    _temp = LocalizationGetter.GetString("Cases", is_cc);
                    flag = true;
                }
                if (CurrentURL.Contains("analytics/tasks"))
                {
                    _temp = LocalizationGetter.GetString("Tasks", is_cc);
                    flag = true;
                }
                if (CurrentURL.Contains("analytics/rootcauseanalysis"))
                {
                    _temp = "Root cause analysis";
                    flag = true;
                }
                if (CurrentURL.Contains("analytics/cacsreport"))
                {
                    _temp = "Clery Act Crime Statistics Report";
                    flag = true;
                }
                if (CurrentURL.Contains("analytics/mediators"))
                {
                    _temp = LocalizationGetter.GetString("Mediators", is_cc);
                    flag = true;
                }
                if (CurrentURL.Contains("messages/"))
                {
                    _temp = LocalizationGetter.GetString("Allmessages", is_cc);
                    flag = true;
                }
                if (CurrentURL.Contains("payment/history") || CurrentURL.Contains("payment"))
                {
                    _temp = LocalizationGetter.GetString("History", is_cc);
                    flag = true;
                }
                if (CurrentURL.Contains("payment/receipt"))
                {
                    _temp = LocalizationGetter.GetString("Receipt", is_cc);
                    flag = true;
                }
                if (CurrentURL.Contains("payment/newpayment"))
                {
                    _temp = LocalizationGetter.GetString("newpayment", is_cc);
                    flag = true;
                }
                if (CurrentURL.Contains("/employeeawareness/poster"))
                {
                    _temp = "Poster";
                    flag = true;
                }
                else if (CurrentURL.Contains("/employeeawareness"))
                {
                    _temp = "Posters";
                    flag = true;
                }
                if (flag)
                {
                    @*<span></span><span></span>*@
                    @Html.Raw("</div>");

                    <div class="headerBlockTextRight">
                        <span class="text">@_temp</span>
                    </div>
                }
            }
            @if ((hrefURL.Contains("/case/")) && (_report_id != 0))
            {
                int _investigation_status = rm._investigation_status;
                if (_investigation_status == 6)
                {
                    _investigation_status = 4;
                }

                <div class="headerPos">
                    @for (int i = 0; i < 5; i++)
                    {
                        if (i < _investigation_status)
                        {
                            <div class="positionN active@{@class_ext}">
                                <span>@_statuses[i]</span>
                            </div>

                            <div class="polos"></div>
                        }
                        else
                        {
                            <div class="positionN">
                                <span>@_statuses[i]</span>
                            </div>
                            <div class="polos"></div>
                        }

                    }
                </div><!--headerPos-->
            }
        </div>

    </div>

    @RenderBody()
    @Html.Partial("~/Views/Shared/HelpPartial.cshtml", new ViewDataDictionary { { "is_reporter", false } })
    <script src="~/Scripts/View/Settings.js"></script>
    <script type="text/javascript">
        $(document).ready(function () {
            //var button = $(".acceptCaseBtn.resolveCase");
            var textareaPopup = $('textarea#txtResolve');

            function overlay() {
                el = document.getElementById("anotherDialog");
                el.style.visibility = (el.style.visibility == "visible") ? "hidden" : "visible";
            }


            var textareaNewPopup = $('textarea#txtEscalate');

            function overlay_approve() {
                el = document.getElementById("approveDialog");
                el.style.visibility = (el.style.visibility == "visible") ? "hidden" : "visible";
            }

            function startClick() {
                $('.logButtonModal').click(
                    function () {
                        if (textareaPopup[0].value == "") {
                            textareaPopup.css({ 'border-color': 'red', 'box-shadow': 'red' });
                        }
                        else {
                            //  console.log('logButtonModal click - _report_id = ' + @_report_id);
                        }
                    }
                );
                $('.repButtonModal').click(
                    function () {
                        if (textareaPopup[0].value == "") {
                            textarea.css({ 'border-color': 'red', 'box-shadow': 'red' });
                        }
                        else {
                            //    console.log('repButtonModal click - _report_id = ' + @_report_id);
                        }
                    }
                );
            }
            startClick();
        });

        $("#return_investigation").on('click', function (el) {

            $("#approveDialog").toggle();
            $("#txtEscalate").attr('placeholder', "@Html.Raw(LocalizationGetter.GetString("AddReasonWhy", is_cc))");

            $("#escalate_btn").text("@Html.Raw(LocalizationGetter.GetString("Returnnvestigation", is_cc))");
            $("#escalate_btn").val(3);
            $("#_overlay_title").text("@Html.Raw(LocalizationGetter.GetString("Returnnvestigation", is_cc))");
            $("#textbox_title").text("@Html.Raw(LocalizationGetter.GetString("AddReasonWhy", is_cc))");
        });
        $("#approve_close").on('click', function (el) {

            $("#approveDialog").toggle();
            $("#txtEscalate").attr('placeholder', "@Html.Raw(same_mediator_warning)");
            $("#escalate_btn").text("@Html.Raw(LocalizationGetter.GetString("CloseCaseUp", is_cc))");
            $("#escalate_btn").val(9);
            $("#_overlay_title").text("@Html.Raw(LocalizationGetter.GetString("CloseCaseUp", is_cc))");
            $("#textbox_title").text("@Html.Raw(same_mediator_warning)");
        });
    </script>
</body>
</html>
